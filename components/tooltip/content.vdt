import MoveWrapper from '../moveWrapper';
import Button from '../button';

const {
    children, value, trigger, showArrow, confirm,
    canHover, className, _feedback, transition,
    container, theme, disabled
} = self.get();

const events = {};
if ((canHover || confirm) && trigger === 'hover') {
    events['ev-mouseenter'] = self.show;
    events['ev-mouseleave'] = self.hide.bind(self, false);
}

const classNameObj = {
    "k-dropdown-menu": true,
    "k-tooltip-content": true, 
    'k-cannot-hover': trigger === 'hover' && !canHover && !confirm,
    [className]: className,
    [`k-${theme}`]: true,
};

<MoveWrapper container={{ container }}>
    <Animate a:show={{ value && !disabled && !self.isEmptyChildren }}
        class={{ classNameObj }}
        a:transition={{ transition }}
        ref="menu"
        {{ ...events }}
        a:delayDestroy={{ false }}
        a:enterStart={{ self._onShow }}
        ev-a:leaveStart={{ self._removeDocumentEvents }}
        ev-mousedown={{ self._onMouseDown }}
    >
        <i v-if={{ showArrow }}
            class={{ {
                "k-arrow": true,
                [`k-${_feedback.vertical}`]: _feedback.vertical,
                [`k-${_feedback.horizontal}`]: _feedback.horizontal,
            } }}
            ref="arrow"
        ></i>
        {{ children }}
        <div class="k-buttons" v-if={{ confirm }}>
            <b:buttons>
                <Button ev-click={{ self._cancel }} size="small">{{ self.get('cancelText') }}</Button>
                <Button type="primary" ev-click={{ self._ok }} size="small">{{ self.get('okText') }}</Button>
            </b:buttons>
        </div>
    </Animate>
</MoveWrapper>
